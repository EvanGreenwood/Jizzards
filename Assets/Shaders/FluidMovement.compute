// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CalculateVelocities
 

struct Boid
{
    float3 position;
    float3 velocity; 
    float variance;
     int status;
};

//variables
RWStructuredBuffer<Boid> Result; 
uniform float Time;
uniform float3 Center;
uniform int N;

[numthreads(64, 1, 1)]
void CalculateVelocities(uint3 id : SV_DispatchThreadID)
{
    Boid boid = Result[id.x];
    //
    //generate 2 orthogonal vectors
   // float3 baseDir = normalize(rand1dTo3d(id.x) - 0.5) * (rand1dTo1d(id.x) * 0.9 + 0.1);
   // float3 orthogonal = normalize(cross(baseDir, rand1dTo3d(id.x + 7.1393) - 0.5)) * (rand1dTo1d(id.x + 3.7443) * 0.9 + 0.1);
    //scale the time and give it a random offset
  //  float scaledTime = Time * 2 + rand1dTo1d(id.x) * 712.131234;
    //calculate a vector based on vectors
   // float3 dir = baseDir * sin(scaledTime) + orthogonal * cos(scaledTime);
    //
    
    float3 centerDiff = Center - Result[id.x].position;
    //
    Result[id.x].velocity += normalize(centerDiff) * Time * 12;
    //
      if (boid.status > 0)
     {
        for (int i = 0; i < N; i++)                 // Not being unrolled
        {
            if (i != id.x)
            {
                float3 diff = normalize(Result[i].position - Result[id.x].position);
                float dist = distance(Result[i].position, Result[id.x].position);
                float attraction = clamp(1 - dist / 7, 0, 1) * 0.4f;
                float repulsion = clamp(1 - ((dist / 1.4f)), 0, 1) * 32;
                Result[id.x].velocity += (attraction - repulsion) * Time * diff;
          //  Result[i] = f(fnh, h, theta);
            }
        }
     }
    Result[id.x].velocity *= (1 - Time * 0.8f);
    Result[id.x].velocity = lerp(Result[id.x].velocity, normalize(Result[id.x].velocity) * 12 * boid.variance, Time * 8.9f * boid.variance);
    
    Result[id.x].position += Result[id.x].velocity * Time;
    Result[id.x].position.y = 0;
    Result[id.x].velocity.y = 0;

}
 